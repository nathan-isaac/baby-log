// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: person.sql

package gateway

import (
	"context"
	"database/sql"
	"time"
)

const createPerson = `-- name: CreatePerson :exec
INSERT INTO person (person_id, name, birth_date, birth_time, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreatePersonParams struct {
	PersonID  string
	Name      string
	BirthDate sql.NullTime
	BirthTime interface{}
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) error {
	_, err := q.db.ExecContext(ctx, createPerson,
		arg.PersonID,
		arg.Name,
		arg.BirthDate,
		arg.BirthTime,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const filterPeople = `-- name: FilterPeople :many
SELECT person_id, name, birth_date, birth_time, created_at, updated_at
FROM person
ORDER BY name
`

func (q *Queries) FilterPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, filterPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.PersonID,
			&i.Name,
			&i.BirthDate,
			&i.BirthTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPerson = `-- name: FindPerson :one
SELECT person_id, name, birth_date, birth_time, created_at, updated_at
FROM person
WHERE person_id = ?
`

func (q *Queries) FindPerson(ctx context.Context, personID string) (Person, error) {
	row := q.db.QueryRowContext(ctx, findPerson, personID)
	var i Person
	err := row.Scan(
		&i.PersonID,
		&i.Name,
		&i.BirthDate,
		&i.BirthTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
