// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: nurse.sql

package gateway

import (
	"context"
	"database/sql"
	"time"
)

const createNurse = `-- name: CreateNurse :exec
INSERT INTO nurse (nurse_id, person_id, right_duration_seconds, left_duration_seconds, right_volume_ml, left_volume_ml, started_at, ended_at, notes, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateNurseParams struct {
	NurseID              string
	PersonID             string
	RightDurationSeconds int64
	LeftDurationSeconds  int64
	RightVolumeMl        int64
	LeftVolumeMl         int64
	StartedAt            time.Time
	EndedAt              sql.NullTime
	Notes                string
	CreatedAt            time.Time
	UpdatedAt            time.Time
}

func (q *Queries) CreateNurse(ctx context.Context, arg CreateNurseParams) error {
	_, err := q.db.ExecContext(ctx, createNurse,
		arg.NurseID,
		arg.PersonID,
		arg.RightDurationSeconds,
		arg.LeftDurationSeconds,
		arg.RightVolumeMl,
		arg.LeftVolumeMl,
		arg.StartedAt,
		arg.EndedAt,
		arg.Notes,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const filterNurse = `-- name: FilterNurse :many
SELECT nurse_id, person_id, right_duration_seconds, left_duration_seconds, right_volume_ml, left_volume_ml, started_at, ended_at, notes, created_at, updated_at
FROM nurse
WHERE person_id = ?
ORDER BY started_at DESC
`

func (q *Queries) FilterNurse(ctx context.Context, personID string) ([]Nurse, error) {
	rows, err := q.db.QueryContext(ctx, filterNurse, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Nurse
	for rows.Next() {
		var i Nurse
		if err := rows.Scan(
			&i.NurseID,
			&i.PersonID,
			&i.RightDurationSeconds,
			&i.LeftDurationSeconds,
			&i.RightVolumeMl,
			&i.LeftVolumeMl,
			&i.StartedAt,
			&i.EndedAt,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNurse = `-- name: FindNurse :one
SELECT nurse_id, person_id, right_duration_seconds, left_duration_seconds, right_volume_ml, left_volume_ml, started_at, ended_at, notes, created_at, updated_at
FROM nurse
WHERE nurse_id = ?
`

func (q *Queries) FindNurse(ctx context.Context, nurseID string) (Nurse, error) {
	row := q.db.QueryRowContext(ctx, findNurse, nurseID)
	var i Nurse
	err := row.Scan(
		&i.NurseID,
		&i.PersonID,
		&i.RightDurationSeconds,
		&i.LeftDurationSeconds,
		&i.RightVolumeMl,
		&i.LeftVolumeMl,
		&i.StartedAt,
		&i.EndedAt,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
